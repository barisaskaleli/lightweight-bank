// Code generated by MockGen. DO NOT EDIT.
// Source: database.go
//
// Generated by this command:
//
//	mockgen -source=database.go -destination=mocks/database_mock.go
//

// Package mock_config is a generated GoMock package.
package mock_config

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockIMysqlInstance is a mock of IMysqlInstance interface.
type MockIMysqlInstance struct {
	ctrl     *gomock.Controller
	recorder *MockIMysqlInstanceMockRecorder
}

// MockIMysqlInstanceMockRecorder is the mock recorder for MockIMysqlInstance.
type MockIMysqlInstanceMockRecorder struct {
	mock *MockIMysqlInstance
}

// NewMockIMysqlInstance creates a new mock instance.
func NewMockIMysqlInstance(ctrl *gomock.Controller) *MockIMysqlInstance {
	mock := &MockIMysqlInstance{ctrl: ctrl}
	mock.recorder = &MockIMysqlInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMysqlInstance) EXPECT() *MockIMysqlInstanceMockRecorder {
	return m.recorder
}

// Database mocks base method.
func (m *MockIMysqlInstance) Database() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Database indicates an expected call of Database.
func (mr *MockIMysqlInstanceMockRecorder) Database() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockIMysqlInstance)(nil).Database))
}
